{"version":3,"sources":["components/Loader/Loader.jsx","api/api.js","api/posts.js","components/PostsList/PostsList.jsx","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/Comments/Comments.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["Loader","className","BASE_URL","getUserPosts","userId","a","fetch","response","json","userPosts","Number","data","filteredUserPosts","filter","userPost","getPostDetails","postId","postDetails","PostsList","selectedUser","setSelectedPostId","selectedPostId","useState","posts","setPosts","loader","setLoader","useEffect","requestedPosts","fetchData","map","post","key","id","body","type","onClick","current","getPostComments","postComments","filteredPostComments","postComment","postCommentToServer","comment","method","headers","JSON","stringify","ok","postComent","deleteCommentFromServer","commentId","result","NewCommentForm","onAdd","name","setName","email","setEmail","setBody","commentError","setCommentError","addComment","useCallback","event","preventDefault","newComment","addedComment","prevComments","onSubmit","placeholder","value","onChange","target","defaultProps","Comments","commentBody","deleteComment","commentErrorId","PostDetails","hiddenComments","setHiddenComments","setPost","comments","setComments","setCommentErrorId","requestedPost","requestedComment","showComments","currentHidenComments","filteredComments","length","App","setSelectedUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4944d586.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport function request(url, options) {\n  fetch(`${BASE_URL}${url}`, options)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n}\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = async(userId) => {\n  const response = await fetch(`${BASE_URL}/posts/`);\n  const userPosts = await response.json();\n\n  if (Number(userId) === 0) {\n    return userPosts.data;\n  }\n\n  const filteredUserPosts = userPosts.data.filter(userPost => (\n    userPost.userId === Number(userId)));\n\n  return filteredUserPosts;\n};\n\nexport const getPostDetails = async(postId) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n  const postDetails = await response.json();\n\n  return postDetails.data;\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\nimport { Loader } from '../Loader';\nimport { getUserPosts } from '../../api/posts';\n\nexport function PostsList({ selectedUser, setSelectedPostId, selectedPostId }) {\n  const [posts, setPosts] = useState([]);\n  const [loader, setLoader] = useState(true);\n\n  useEffect(() => {\n    const fetchData = async() => {\n      const requestedPosts = await getUserPosts(selectedUser);\n\n      setPosts(requestedPosts);\n    };\n\n    fetchData();\n    setLoader(false);\n  }, [selectedUser]);\n\n  const buttonStatus = (postId) => {\n    setSelectedPostId((current) => {\n      if (current === postId) {\n        return '';\n      }\n\n      return postId;\n    });\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      {loader\n        ? <Loader />\n        : (\n          <ul className=\"PostsList__list\">\n            {posts.map(post => (\n              <li className=\"PostsList__item\" key={post.id}>\n                <div>\n                  <b>\n                    {`[User #${post.userId}]:`}\n                  </b>\n                  {post.body}\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => buttonStatus(post.id)}\n                >\n                  {selectedPostId !== post.id ? 'Open' : 'Close'}\n                </button>\n              </li>\n            ))}\n          </ul>\n        )}\n    </div>\n  );\n}\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      body: PropTypes.string.isRequired,\n      userId: PropTypes.number.isRequired,\n    }).isRequired,\n  ).isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  setSelectedPostId: PropTypes.func.isRequired,\n}.isRequired;\n","import { BASE_URL } from './api';\n\nexport const getPostComments = async(postId) => {\n  const response = await fetch(`${BASE_URL}/comments/`);\n  const postComments = await response.json();\n\n  const filteredPostComments = postComments.data.filter(postComment => (\n    postComment.postId === Number(postId)));\n\n  return filteredPostComments;\n};\n\nexport const postCommentToServer = async(comment) => {\n  const response = await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  });\n\n  if (!response.ok) {\n    return 'Error';\n  }\n\n  const postComent = response.json();\n\n  return postComent.data;\n};\n\nexport const deleteCommentFromServer = async(commentId) => {\n  const response = await fetch(`${BASE_URL}/comments/${commentId}`,\n    { method: 'DELETE' });\n\n  if (!response.ok) {\n    return 'Error';\n  }\n\n  const result = await response.json();\n\n  return result.data;\n};\n","import React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\nimport { postCommentToServer } from '../../api/comments';\n\nexport const NewCommentForm = ({ onAdd, postId }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [commentError, setCommentError] = useState('');\n\n  const addComment = useCallback(async(event) => {\n    event.preventDefault();\n\n    if (!name || !email || !body) {\n      return;\n    }\n\n    const newComment = {\n      name,\n      body,\n      email,\n      postId,\n    };\n\n    const addedComment = await postCommentToServer(newComment);\n\n    if (addedComment === 'Error') {\n      setCommentError('Error');\n\n      return;\n    }\n\n    onAdd(prevComments => [...prevComments, addedComment]);\n\n    setName('');\n    setEmail('');\n    setBody('');\n  }, [name, body, email, onAdd, postId]);\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={addComment}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__textarea\"\n          value={body}\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={postCommentToServer}\n      >\n        Add a comment\n      </button>\n      {commentError\n        && (\n          <p className=\"errorText\">\n            Try again leter.\n          </p>\n        )}\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n  postId: PropTypes.number,\n};\n\nNewCommentForm.defaultProps = {\n  postId: 0,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Comments = (\n  {\n    commentId,\n    commentBody,\n    deleteComment,\n    commentErrorId,\n  },\n) => (\n  <>\n    <li\n      className=\"PostDetails__list-item\"\n      key={commentId}\n    >\n      <button\n        className=\"button\"\n        type=\"button\"\n        onClick={() => deleteComment(commentId)}\n      >\n        X\n      </button>\n      <p>{commentBody}</p>\n    </li>\n\n    {commentErrorId === commentId\n      && (\n        <p className=\"errorText\">Error, please, try again later.</p>\n      )}\n  </>\n);\n\nComments.propTypes = {\n  commentId: PropTypes.number.isRequired,\n  commentBody: PropTypes.string.isRequired,\n  deleteComment: PropTypes.func.isRequired,\n  commentErrorId: PropTypes.number.isRequired,\n};\n","import React, { useEffect, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { getPostComments, deleteCommentFromServer } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { Loader } from '../Loader';\nimport { Comments } from '../Comments';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [hiddenComments, setHiddenComments] = useState(true);\n  const [post, setPost] = useState({});\n  const [comments, setComments] = useState([]);\n  const [loader, setLoader] = useState(true);\n  const [commentErrorId, setCommentErrorId] = useState(0);\n\n  useEffect(() => {\n    const fetchData = async() => {\n      const requestedPost = await getPostDetails(selectedPostId);\n\n      setPost(requestedPost);\n    };\n\n    fetchData();\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    const fetchData = async() => {\n      const requestedComment = await getPostComments(post.id);\n\n      setComments(requestedComment);\n    };\n\n    fetchData();\n    setLoader(false);\n  }, [post.id]);\n\n  const showComments = useCallback(() => {\n    setHiddenComments(currentHidenComments => !currentHidenComments);\n  }, []);\n\n  const deleteComment = useCallback(async(commentId) => {\n    const response = await deleteCommentFromServer(commentId);\n\n    if (response === 'Error') {\n      setCommentErrorId(commentId);\n\n      return;\n    }\n\n    const filteredComments = comments.filter(comment => (\n      comment.id !== commentId\n    ));\n\n    setComments(filteredComments);\n  }, [comments]);\n\n  return (\n    <>\n      {loader\n        ? <Loader />\n        : (\n          <div className=\"PostDetails\">\n            <h2>Post details:</h2>\n\n            <section className=\"PostDetails__post\">\n              <p>{post.body}</p>\n            </section>\n\n            <section className=\"PostDetails__comments\">\n              {comments.length === 0\n                ? <p>No comments</p>\n                : (\n                  <>\n                    <button\n                      type=\"button\"\n                      className=\"button\"\n                      onClick={showComments}\n                    >\n                      {hiddenComments\n                        ? `Show ${comments.length} comment(s)`\n                        : `Hide ${comments.length} comment(s)`\n                      }\n                    </button>\n\n                    {!hiddenComments && (\n                      <ul className=\"PostDetails__list\">\n                        {comments.map(comment => (\n                          <Comments\n                            key={comment.id}\n                            commentId={comment.id}\n                            commentErrorId={commentErrorId}\n                            deleteComment={deleteComment}\n                            commentBody={comment.body}\n                          />\n                        ))}\n                      </ul>\n                    )}\n                  </>\n                )}\n            </section>\n\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm\n                  onAdd={setComments}\n                  postId={post.id}\n                />\n              </div>\n            </section>\n          </div>\n        )}\n    </>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nfunction App() {\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState('');\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={event => setSelectedUser(event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUser={Number(selectedUser)}\n            setSelectedPostId={setSelectedPostId}\n            selectedPostId={Number(selectedPostId)}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n          && <PostDetails selectedPostId={Number(selectedPostId)} />}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}